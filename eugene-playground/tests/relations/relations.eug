/* define some properties */
Property prop1(txt);
Property prop2(txt);
Property prop3(txt);
Property prop4(txt);

/* define some part types */
PartType P1(prop1);
PartType P2(prop1, prop2);
PartType P3(prop1, prop2, prop3);
PartType P4(prop1, prop2, prop3, prop4);

/* define some parts */
P1 p1_1(.prop1("A"));
P1 p1_2(.prop1("T"));
P1 p1_3(.prop1("C"));
P1 p1_4(.prop1("G"));

P2 p2_1(.prop1("A"));
P2 p2_2(.prop1("T"));
P2 p2_3(.prop1("C"));
P2 p2_4(.prop1("G"));

P3 p3_1(.prop1("A"));
P3 p3_2(.prop1("T"));
P3 p3_3(.prop1("C"));
P3 p3_4(.prop1("G"));

P3 p4_1(.prop1("A"));
P3 p4_2(.prop1("T"));
P3 p4_3(.prop1("C"));
P3 p4_4(.prop1("G"));

/*
 * RELATIONSHIPS
 *
 * in earlier Eugene versions (<v1.9):
 *
 * Property represses(txt);
 * P1 p1_1(.represses("p2_1"));
 *
 * now, we offer an additional feature 
 * to define and constraint relationships 
 * among parts:
 * p1_1 REPRESSES p2_1
 * 
 */

/*
 * Relationships are design-specific:
 * REPRESSES, DRIVES, INDUCES, BINDS
 *
 * However there also exist design-independent
 * relationships: 
 * ORTHO
 * -> we also call design-independent relationships
 *    as ``facts''
 *
 */
 
/* TODO: 
 * define each relationship textually
 */
 
/* 
 * EXAMPLES of defining relationships:
 */

// design-specific relationships
p1_1 REPRESSES p2_1;
p1_2 DRIVES p2_2;
p1_3 INDUCES p2_3;

PartType Molecule();
Molecule atc;
atc BINDS p1_1;

// FACTS
p1_4 ORTHO p2_4;
  

/*
 * CONSTRAINING Relationships:
 *
 * in Eugene, constraining relationships is only possible 
 * in the context of a device.
 * therefore, we offer new ``Rule'' operators that are
 * equal to the definition of a relationship
 */

Device D(P1, P2, P3, P4);

/** RULES **/
// Option 1:
ON D: P1 REPRESSES P2;

// Option 2:
D.P1 REPRESSES D.P2;

// drawbacks of option 2: whenever a Device consists of multiple elements 
// with the same name, then we cannot figure out what element is being meant

// -> use indexing!!!
// Example:
// Device Dx(P1, P1, P1, P1);
// here, D.P1 is ambiguous...
// therefore, D[0], D[1], D[2], D[3]
// -> D[0] REPRESSES D[1] 

 






