//include "./tests/declaration/device-declaration.eug"

//println(D);

/*
 *   A AFTER B
 */
// A and B are placeholders for P1, P2, ..., P10



/**************
 * Test Cases *
 **************/

// - A does not exist
//Rule r( A AFTER P2 );

// - B does not exist
//Rule r( P2 AFTER B );

 
// - A does not exist in device
/**
PartType PA;
Rule r(
	ON D:
	   PA AFTER P2
);
 **/

/*******
// - B does not exist in device
PartType PB;
Rule r(
	ON D:
	   P2 AFTER PB
);   
//println(r);
//permute(D, strict);
 
 * Q: Should we throw an exception here?
 * -> I'd say no... since the after() predicate requires that the device (D)
 *                  contains both operands (A and B)
 ***/

/****
// create a simple device
Device D3(P1, P2, P3);
Rule rValid(
    P1 AFTER P2
);
permute(D3, strict);
    
Rule R(
	ON D:
		P1 AFTER P2 
		AND
		P2 AFTER P3
		AND
		P3 AFTER P4
		AND
		P4 AFTER P5
		AND
		P5 AFTER P6
		AND
		P6 AFTER P7
		AND
		P7 AFTER P8
		AND
		P8 AFTER P9
		AND
		P9 AFTER P10
);
permute(D, strict);
****/

include "./tests/rules/design-space.h"

Device D3(P1, P2, P3);
product(D3);

Rule r1(p1_1 AFTER p1_2 AND p1_1 AFTER p1_3 AND p1_1 AFTER p1_4 AND p1_1 AFTER p1_5);
Rule r2(p1_2 AFTER p1_3 AND p1_2 AFTER p1_4 AND p1_2 AFTER p1_5);
Rule r3(p1_3 AFTER p1_4 AND p1_3 AFTER p1_5);
Rule r4(p1_4 AFTER p1_5);

Device D4(P1, P1, P1, P1, P1);
product(D4);
	
