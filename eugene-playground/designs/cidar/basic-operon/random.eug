/* Nif HDKY Data Set 1 */

Property Name(txt);
Property Strength(num);
Property UUID(txt);
Property Type(txt);
Property Color(num);

Part Promoter(UUID, Name, Strength, Type, Color);
Part RBS(UUID, Name, Strength, Type, Color);
Part Term(UUID, Name, Type, Color);
Part Spacer(UUID, Name, Type, Color);
Part CDS(UUID, Name, Type, Color);

Promoter T7("0000", "T7", 0.38, "p", 5);
Promoter P6("0001", "P6", 0.162, "p", 4);
Promoter P4("0002", "P4", 0.089, "p", 3);
Promoter P5("0003", "P5", 0.056, "p", 2);
Promoter P2("0004", "P2", 0.019, "p", 1);

// RBS 0 value from Data set 1
RBS R0("0005", "RBS0", 42010.79, "r", 2);
RBS R1("0006", "RBS1", 39802.15, "r", 1);
RBS R2("0007", "RBS2", 52612.24, "r", 3);
RBS R3("0008", "RBS3", 52612.24, "r", 3); // Strange: Str(RBS2) == Str(RBS3)?
RBS R4("0009", "RBS4", 52612.24, "r", 3); // Strange: Str(RBS2) == Str(RBS4)?
RBS R5("000a", "RBS5", 52612.24, "r", 3); // Strange: Str(RBS2) == Str(RBS5)?
RBS R6("000b", "RBS6", 52612.24, "r", 3); // Strange: Str(RBS2) == Str(RBS6)?
RBS OriginalRBS("000c", "OriginalRBS", 0, "r", 0);

CDS H("000c", "H", "c", 2);
CDS D("000d", "D", "c", 4);
CDS K("000e", "K", "c", 6);
CDS Y("000f", "Y", "c", 8);

Term OriginalTerminator("0010", "OriginalTerminator", "t", 6);
Term T23("0011", "T23", "t", 6);
Term TB("0012", "TB", "t", 6);

Spacer S1("0013", "S1", "s", 0);
Spacer OriginalSpacer("0013", "OriginalSpacer", "s", 0);


// reverse parts

Promoter T7r("0000", "T7", 0.38, "<p", 5);
Promoter P6r("0001", "P6", 0.162, "<p", 4);
Promoter P4r("0002", "P4", 0.089, "<p", 3);
Promoter P5r("0003", "P5", 0.056, "<p", 2);
Promoter P2r("0004", "P2", 0.019, "<p", 1);


CDS Hr("000c", "H", "<c", 2);
CDS Dr("000d", "D", "<c", 4);
CDS Kr("000e", "K", "<c", 6);
CDS Yr("000f", "Y", "<c", 8);

// PARTS library end 


Device FirstDataSetDev (
    Promoter, 
        RBS, CDS, 
    T23, 
    S1, 
    Promoter,
        OriginalSpacer, OriginalRBS, CDS, 
        OriginalSpacer, OriginalRBS, CDS, 
        OriginalSpacer, OriginalRBS, CDS, 
    OriginalTerminator
);

// Generate all device combinations satisfying rules 
Device [] FirstDevices  = permute(FirstDataSetDev, 15, flexible);
Device [] FirstDevices1  = product(FirstDataSetDev, 15, flexible);


print("Permutations of first half: ", FirstDevices.size());
print("Products of first half: ", FirstDevices1.size());

Device [] d1;

function boolean prct(Device d) {
    Rule r1 (d STARTSWITH Promoter);
    Rule r2 (d ENDSWITH Term);
    Rule r3 (r1 AND r2);
    if (r3) {
        return true;
    } else {
        return false;
    }
}

boolean b;

Device []correctDevs;


for (num i=0; i<FirstDevices.size(); i++) {

    d1 = product(FirstDevices[i], strict);
    print ("# Products : ", d1.size());

    for (num k=0; k<d1.size(); k++) {

        //b = prct(d1[k]);
        b = true;

        if (b) {
            correctDevs.add(d1[k]);
        }

    }
}

num j = 0;
for( num i=0; i<correctDevs.size(); i++) {
    print();
    for (num m=0; m<correctDevs[i].size(); m++) {
        if (correctDevs[i][m].Color > 0) {
            print(correctDevs[i][m].Type, " ", correctDevs[i][m].Name, " ", correctDevs[i][m].Color);
        } else {
            print(correctDevs[i][m].Type, " ", correctDevs[i][m].Name);
        }
    }
}





