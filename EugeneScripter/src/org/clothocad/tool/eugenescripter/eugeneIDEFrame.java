/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * eugeneIDEFrame.java
 *
 * Created on Jun 12, 2012, 6:00:03 PM
 */
package org.clothocad.tool.eugenescripter;

/**
 *
 * @author cassie
 */
import java.awt.Color;
import java.io.*;
import java.util.HashMap;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;
import jsyntaxpane.DefaultSyntaxKit;
import jsyntaxpane.SyntaxDocument;
import jsyntaxpane.actions.UndoAction;
import jsyntaxpane.actions.RedoAction;
import org.openide.util.Exceptions;

public class eugeneIDEFrame extends javax.swing.JFrame {

    /**
     * Creates new form eugeneIDEFrame
     */
    public eugeneIDEFrame() {
        super();
        //this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle("Eugene IDE");
        this.setResizable(true);
        clothoOps.initHashMaps();
        sbolOps.initHashMaps();
        hmFileNames = new HashMap<Integer, String>();
        fc = new javax.swing.JFileChooser();
        fc.setFileFilter(new eugeneFileFilter());
        outputListModel = new DefaultListModel();
        collectionContentsListModel = new DefaultListModel();
        DefaultSyntaxKit.initKit();
        initComponents();
        /*
         * add new tab
         */
        editorTabbedPane.addTab("untitled", createEditorPane());
        hmFileNames.put((Integer) editorTabbedPane.getSelectedIndex(), "untitled");
        /*
         * set bottonPane as message console
         */
        mc = new MessageConsole(consoleDisplayTextPane);
        mc.redirectOut(null, System.out);
        mc.redirectErr(Color.RED, null);
        mc.setMessageLines(500);
        mc.setEnable(false);
        this.setVisible(true);
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        outputScrollPane = new javax.swing.JScrollPane();
        outputList = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        newFileButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        runEugeneButton = new javax.swing.JButton();
        clearConsoleButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        collectionNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        saveToClothoButton = new javax.swing.JButton();
        exportToSBOLButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        collectionContentsScrollPane = new javax.swing.JScrollPane();
        collectionContentsList = new javax.swing.JList();
        editorTabbedPane = new javax.swing.JTabbedPane();
        consoleDisplayScrollPane = new javax.swing.JScrollPane();
        consoleDisplayTextPane = new javax.swing.JTextPane();
        outputClearButton = new javax.swing.JButton();
        importSBOLButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFileMenuItem = new javax.swing.JMenuItem();
        openFileMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        closeFileMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        copyMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        pasteMenuItem = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        eugeneMenu = new javax.swing.JMenu();
        runEugeneMenuItem = new javax.swing.JMenuItem();
        clearConsoleMenuItem = new javax.swing.JMenuItem();
        clothoMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        saveToClothoMenuItem = new javax.swing.JMenuItem();
        sbolMenu = new javax.swing.JMenu();
        importFromSBOLMenuItem = new javax.swing.JMenuItem();
        exportToSBOLMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.jMenuItem1.text")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        outputList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        outputList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputListMouseClicked(evt);
            }
        });
        outputScrollPane.setViewportView(outputList);

        jToolBar1.setRollover(true);

        newFileButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.newFileButton.text_1")); // NOI18N
        newFileButton.setFocusable(false);
        newFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(newFileButton);

        openButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.openButton.text_1")); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        saveAsButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveAsButton.text_1")); // NOI18N
        saveAsButton.setFocusable(false);
        saveAsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveAsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveAsButton);

        saveButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveButton.text_1")); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        closeButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.closeButton.text_1")); // NOI18N
        closeButton.setFocusable(false);
        closeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        closeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(closeButton);

        runEugeneButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.runEugeneButton.text_1")); // NOI18N
        runEugeneButton.setFocusable(false);
        runEugeneButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runEugeneButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runEugeneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runEugeneButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runEugeneButton);

        clearConsoleButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.clearConsoleButton.text_1")); // NOI18N
        clearConsoleButton.setFocusable(false);
        clearConsoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearConsoleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsoleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(clearConsoleButton);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.jLabel1.text_1")); // NOI18N

        collectionNameTextField.setEditable(false);
        collectionNameTextField.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.collectionNameTextField.text_1")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.jLabel2.text_1")); // NOI18N

        saveToClothoButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveToClothoButton.text_1")); // NOI18N
        saveToClothoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToClothoButtonActionPerformed(evt);
            }
        });

        exportToSBOLButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.exportToSBOLButton.text_1")); // NOI18N
        exportToSBOLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToSBOLButtonActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.jLabel3.text_1")); // NOI18N

        connectButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.connectButton.text_1")); // NOI18N
        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        collectionContentsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                collectionContentsListMouseClicked(evt);
            }
        });
        collectionContentsScrollPane.setViewportView(collectionContentsList);

        consoleDisplayTextPane.setEditable(false);
        consoleDisplayScrollPane.setViewportView(consoleDisplayTextPane);

        outputClearButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.outputClearButton.text")); // NOI18N
        outputClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputClearButtonActionPerformed(evt);
            }
        });

        importSBOLButton.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.importSBOLButton.text")); // NOI18N
        importSBOLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSBOLButtonActionPerformed(evt);
            }
        });

        fileMenu.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.fileMenu.text")); // NOI18N

        newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFileMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.newFileMenuItem.text_1")); // NOI18N
        newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newFileMenuItem);

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.openFileMenuItem.text_1")); // NOI18N
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveMenuItem.text_1")); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveAsMenuItem.text_1")); // NOI18N
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        closeFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        closeFileMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.closeFileMenuItem.text_1")); // NOI18N
        closeFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeFileMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.editMenu.text_1")); // NOI18N

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.cutMenuItem.text_1")); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.copyMenuItem.text_1")); // NOI18N
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.pasteMenuItem.text_1")); // NOI18N
        editMenu.add(pasteMenuItem);

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.undoMenuItem.text")); // NOI18N
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.redoMenuItem.text")); // NOI18N
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoMenuItem);

        jMenuBar1.add(editMenu);

        eugeneMenu.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.eugeneMenu.text_1")); // NOI18N

        runEugeneMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.runEugeneMenuItem.text_1")); // NOI18N
        runEugeneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runEugeneMenuItemActionPerformed(evt);
            }
        });
        eugeneMenu.add(runEugeneMenuItem);

        clearConsoleMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.clearConsoleMenuItem.text_1")); // NOI18N
        clearConsoleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsoleMenuItemActionPerformed(evt);
            }
        });
        eugeneMenu.add(clearConsoleMenuItem);

        jMenuBar1.add(eugeneMenu);

        clothoMenu.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.clothoMenu.text_1")); // NOI18N

        connectMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.connectMenuItem.text_1")); // NOI18N
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        clothoMenu.add(connectMenuItem);

        saveToClothoMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.saveToClothoMenuItem.text_1")); // NOI18N
        saveToClothoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToClothoMenuItemActionPerformed(evt);
            }
        });
        clothoMenu.add(saveToClothoMenuItem);

        jMenuBar1.add(clothoMenu);

        sbolMenu.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.sbolMenu.text_1")); // NOI18N

        importFromSBOLMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.importFromSBOLMenuItem.text")); // NOI18N
        importFromSBOLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFromSBOLMenuItemActionPerformed(evt);
            }
        });
        sbolMenu.add(importFromSBOLMenuItem);

        exportToSBOLMenuItem.setText(org.openide.util.NbBundle.getMessage(eugeneIDEFrame.class, "eugeneIDEFrame.exportToSBOLMenuItem.text_1")); // NOI18N
        exportToSBOLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToSBOLMenuItemActionPerformed(evt);
            }
        });
        sbolMenu.add(exportToSBOLMenuItem);

        jMenuBar1.add(sbolMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(importSBOLButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(collectionNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(collectionContentsScrollPane, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(consoleDisplayScrollPane)
                    .addComponent(editorTabbedPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(outputClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(exportToSBOLButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveToClothoButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1311, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(connectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addComponent(importSBOLButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collectionNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collectionContentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editorTabbedPane)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(outputClearButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(saveToClothoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exportToSBOLButton)
                                .addGap(36, 36, 36))
                            .addComponent(consoleDisplayScrollPane))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private JScrollPane createEditorPane() {
        EugenePane eugenePane = new EugenePane();

        JScrollPane editorScroll = new JScrollPane();

        editorScroll.setViewportView(eugenePane);
        DefaultSyntaxKit.registerContentType("text/eugene", EugeneSyntaxKit.class.getName());
        eugenePane.setContentType("text/eugene");
        return editorScroll;
    }

    private EugenePane getEditorPane() {
        JScrollPane editorScroll = (JScrollPane) editorTabbedPane.getSelectedComponent();
        EugenePane eugenePane = (EugenePane) editorScroll.getViewport().getComponent(0);
        return eugenePane;
    }

    public static void cleanUp() {
        //eugene cleanup
        //sbol cleanup
        //clotho cleanup
        if (null != hmFileNames) {
            hmFileNames.clear();
            hmFileNames = null;
        }
        clothoOps.cleanUp();
        sbolOps.cleanUp();
    }

    private void newFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileButtonActionPerformed
        newFileMenuItemActionPerformed(evt);
    }//GEN-LAST:event_newFileButtonActionPerformed

    private void runEugeneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runEugeneButtonActionPerformed
        runEugeneMenuItemActionPerformed(evt);
    }//GEN-LAST:event_runEugeneButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        openFileMenuItemActionPerformed(evt);
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        saveAsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_saveAsButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveMenuItemActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeFileMenuItemActionPerformed(evt);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        connectMenuItemActionPerformed(evt);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void saveToClothoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToClothoButtonActionPerformed
        saveToClothoMenuItemActionPerformed(evt);
    }//GEN-LAST:event_saveToClothoButtonActionPerformed

    private void exportToSBOLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToSBOLButtonActionPerformed
        exportToSBOLMenuItemActionPerformed(evt);
    }//GEN-LAST:event_exportToSBOLButtonActionPerformed

    private void newFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuItemActionPerformed
        // open new untitled tab
        editorTabbedPane.addTab("untitled", createEditorPane());
        editorTabbedPane.setSelectedIndex(editorTabbedPane.getTabCount() - 1);
        hmFileNames.put((Integer) editorTabbedPane.getSelectedIndex(), "untitled");
    }//GEN-LAST:event_newFileMenuItemActionPerformed

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(eugeneIDEFrame.this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            editorTabbedPane.addTab(file.getName(), createEditorPane());
            editorTabbedPane.setSelectedIndex(editorTabbedPane.getTabCount() - 1);
            //tabbedPane.setName(file.getName());
            JEditorPane topPane = getEditorPane();
            try {
                BufferedReader in = new BufferedReader(new FileReader(file));
                topPane.setText("");
                String str;
                String newString = "";
                while ((str = in.readLine()) != null) {
                    //topPane.append(str + "\n");
                    newString += str;
                    newString += "\n";
                }
                in.close();
                topPane.setText(newString);
            } catch (IOException exception) {
            }
            // add name of file to hash map
            hmFileNames.put((Integer) editorTabbedPane.getSelectedIndex(), file.getAbsolutePath());
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        String pathName = hmFileNames.get((Integer) editorTabbedPane.getSelectedIndex());
        if (pathName.equals("untitled")) {
            saveAsMenuItemActionPerformed(evt);
        } else {
            JEditorPane topPane = getEditorPane();
            File file = new File(pathName);
            try {
                FileWriter fstream = new FileWriter(file);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write(topPane.getText());
                out.close();
            } catch (Exception exception) {
            }
            editorTabbedPane.setTitleAt(editorTabbedPane.getSelectedIndex(), file.getName());
            hmFileNames.put((Integer) editorTabbedPane.getSelectedIndex(), file.getAbsolutePath());
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        JEditorPane topPane = getEditorPane();
        if (topPane == null) {
            JOptionPane.showMessageDialog(eugeneIDEFrame.this, "Please create a new tab before saving");
            return;
        }

        int returnVal = fc.showSaveDialog(eugeneIDEFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fc.getSelectedFile();
            try {
                FileWriter fstream = new FileWriter(file);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write(topPane.getText());
                out.close();
            } catch (Exception exception) {
            }
            editorTabbedPane.setTitleAt(editorTabbedPane.getSelectedIndex(), file.getName());
            hmFileNames.put((Integer) editorTabbedPane.getSelectedIndex(), file.getAbsolutePath());
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void closeFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileMenuItemActionPerformed
        // TODO:  add dialog for option to save file
        Object[] options = {"Yes",
            "No",
            "Cancel"};
        int n = JOptionPane.showOptionDialog(eugeneIDEFrame.this,
                "Would you like to save your file before closing?",
                "Save File",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);

        if (editorTabbedPane.getTabCount() != 0) {
            if (n == JOptionPane.YES_OPTION) {
                // if path is untitled, save as, else save
                String pathName = hmFileNames.get((Integer) editorTabbedPane.getSelectedIndex());
                if ("untitled".equals(pathName)) {
                    saveAsMenuItemActionPerformed(evt);
                } else {
                    saveMenuItemActionPerformed(evt);
                }
                hmFileNames.remove((Integer) editorTabbedPane.getSelectedIndex());
                editorTabbedPane.removeTabAt(editorTabbedPane.getSelectedIndex());
            } else {
                hmFileNames.remove((Integer) editorTabbedPane.getSelectedIndex());
                editorTabbedPane.removeTabAt(editorTabbedPane.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_closeFileMenuItemActionPerformed

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        clothoOps.connect(collectionContentsList, collectionContentsListModel, collectionNameTextField);
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void saveToClothoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToClothoMenuItemActionPerformed
        Object[] options = {"Selected",
            "All",
            "Cancel"};
        int n = JOptionPane.showOptionDialog(eugeneIDEFrame.this,
                "Would you like to save the selected outputs or all outputs?",
                "Save Collection",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);
        if (n == JOptionPane.YES_OPTION) {
            clothoOps.saveToClothoSelection(outputList, mc);
        } else if (n == JOptionPane.NO_OPTION) {
            clothoOps.saveToClotho(mc);
        }
    }//GEN-LAST:event_saveToClothoMenuItemActionPerformed

    private void exportToSBOLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToSBOLMenuItemActionPerformed
        Object[] options = {"Selected",
            "All",
            "Cancel"};
        int n = JOptionPane.showOptionDialog(eugeneIDEFrame.this,
                "Would you like to save the selected outputs or all outputs?",
                "Save Collection",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);
        if (n == JOptionPane.YES_OPTION) {
            String name = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection Name",
                    "SBOL Collection Name",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "Results");
            String uri = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection URI",
                    "SBOL Collection URI",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "Results_URI");
            String description = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection Description",
                    "SBOL Collection Description",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "A collection of Clotho Outputs");
            try {
                try {
                    sbolOps.exportToSBOLSelection(outputList, name, uri, description, mc);
                } catch (JAXBException ex) {
                    Exceptions.printStackTrace(ex);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }

        } else if (n == JOptionPane.NO_OPTION) {
            String name = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection Name",
                    "SBOL Collection Name",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "Results");
            String uri = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection URI",
                    "SBOL Collection URI",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "Results_URI");
            String description = (String) JOptionPane.showInputDialog(
                    eugeneIDEFrame.this,
                    "Enter the SBOL Collection Description",
                    "SBOL Collection Description",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "A collection of Clotho Outputs");
            try {
                try {
                    sbolOps.exportToSBOL(name, uri, description, mc);
                } catch (JAXBException ex) {
                    Exceptions.printStackTrace(ex);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }//GEN-LAST:event_exportToSBOLMenuItemActionPerformed

    private void clearConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsoleButtonActionPerformed
        mc.clear();
    }//GEN-LAST:event_clearConsoleButtonActionPerformed

    private void clearConsoleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsoleMenuItemActionPerformed
        mc.clear();
    }//GEN-LAST:event_clearConsoleMenuItemActionPerformed

    private void runEugeneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runEugeneMenuItemActionPerformed
        // TODO add your handling code here:
        JEditorPane topPane = getEditorPane();
        try {
            eugeneOps.runEugene(topPane.getText(), mc);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        clothoOps.displayOutputs(outputList, outputListModel);
        JOptionPane.showMessageDialog(eugeneIDEFrame.this, "Eugene script completed.");
    }//GEN-LAST:event_runEugeneMenuItemActionPerformed

    private void collectionContentsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectionContentsListMouseClicked
        JList list = (JList) evt.getSource();
        EugenePane topPane = getEditorPane();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());

            eugeneOps.addClothoPart(list, index, topPane, mc);
        }
    }//GEN-LAST:event_collectionContentsListMouseClicked

    private void outputListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputListMouseClicked
        // TODO add your handling code here:
        // pop up new window with part stats
    }//GEN-LAST:event_outputListMouseClicked

    private void outputClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputClearButtonActionPerformed
        // TODO add your handling code here:
        outputListModel.clear();
        outputList.setModel(outputListModel);
    }//GEN-LAST:event_outputClearButtonActionPerformed

    private void importFromSBOLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFromSBOLMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(eugeneIDEFrame.this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                sbolOps.importFromSBOL(file, collectionContentsList, collectionContentsListModel, collectionNameTextField);
            } catch (JAXBException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_importFromSBOLMenuItemActionPerformed

    private void importSBOLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSBOLButtonActionPerformed
        importFromSBOLMenuItemActionPerformed(evt);
    }//GEN-LAST:event_importSBOLButtonActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        UndoAction undo = new UndoAction();
        //get textcomponent
        JTextComponent topPane = (JTextComponent) getEditorPane();
        int dot = topPane.getCaret().getDot();
        SyntaxDocument sDoc = (SyntaxDocument) topPane.getDocument();
        //get caret positon
        //get syntaxdoc
        undo.actionPerformed(topPane, sDoc, dot, evt);
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        RedoAction redo = new RedoAction();
                //get textcomponent
        JTextComponent topPane = (JTextComponent) getEditorPane();
        int dot = topPane.getCaret().getDot();
        SyntaxDocument sDoc = (SyntaxDocument) topPane.getDocument();
        //get caret positon
        //get syntaxdoc
        redo.actionPerformed(topPane, sDoc, dot, evt);
    }//GEN-LAST:event_redoMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(eugeneIDEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(eugeneIDEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(eugeneIDEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(eugeneIDEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new eugeneIDEFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearConsoleButton;
    private javax.swing.JMenuItem clearConsoleMenuItem;
    private javax.swing.JButton closeButton;
    private javax.swing.JMenuItem closeFileMenuItem;
    private javax.swing.JMenu clothoMenu;
    private javax.swing.JList collectionContentsList;
    private javax.swing.JScrollPane collectionContentsScrollPane;
    private javax.swing.JTextField collectionNameTextField;
    private javax.swing.JButton connectButton;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JScrollPane consoleDisplayScrollPane;
    private javax.swing.JTextPane consoleDisplayTextPane;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JTabbedPane editorTabbedPane;
    private javax.swing.JMenu eugeneMenu;
    private javax.swing.JButton exportToSBOLButton;
    private javax.swing.JMenuItem exportToSBOLMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importFromSBOLMenuItem;
    private javax.swing.JButton importSBOLButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newFileButton;
    private javax.swing.JMenuItem newFileMenuItem;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JButton outputClearButton;
    private javax.swing.JList outputList;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JButton runEugeneButton;
    private javax.swing.JMenuItem runEugeneMenuItem;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton saveToClothoButton;
    private javax.swing.JMenuItem saveToClothoMenuItem;
    private javax.swing.JMenu sbolMenu;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
    final javax.swing.JFileChooser fc;
    private static HashMap<Integer, String> hmFileNames;
    private MessageConsole mc;
    private DefaultListModel outputListModel;
    private DefaultListModel collectionContentsListModel;

    //Eugene file filter
    private final class eugeneFileFilter extends FileFilter {

        @Override
        public boolean accept(File pathname) {

            if (pathname.isDirectory()) {
                return true;
            }

            String[] path = pathname.getPath().split("\\.");
            if (path[path.length - 1].equalsIgnoreCase("eug")) {
                return true;
            }

            return false;
        }

        @Override
        public String getDescription() {
            return "Eugene files";
        }
    }
}
